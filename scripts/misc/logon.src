use uo;
use os;
use util;
use math;
use cfgfile;
use file;

include "include/eventID";
include "include/utility";
include "include/packets";
include ":virtue:noto";
include ":attributes:attributes";
include "include/clock";
include ":timeutils:time";
include ":equipment:equipment";

program onlogon( who )
  TrackIP( who );
  RestoreMods( who );
  EraseObjProperty( who, "IsMeditating" );
  SetObjProperty( who, "LoggedIn", 1 );
  start_script( ":meditation:medCheck", who );
  start_script( ":attributes:attributeCore", who );
  if ( who.cmdlevel < 2 )
    RevokePrivilege( who, "hearghosts" );
  else
    who.concealed := 2;
    var oldpack := who.backpack;
    if ( oldpack.objtype != 0xE75 )
      MoveObjectToLocation( oldpack, 5851, 1161, 0, "britannia_alt",
                            MOVEOBJECT_FORCELOCATION ); // newmap problem
      var newpack := CreateItemAtLocation( 5851, 1162, 0, 0xE75, 1,
                                           "britannia_alt" ); // newmap problem
      EquipItem( who, newpack );
      foreach thing in EnumerateItemsInContainer( oldpack, ENUMERATE_ROOT_ONLY )
        MoveItemToContainer( thing, newpack );
      endforeach
    endif
  endif

  // var rm := GetObjProperty(who, "ReportMenu");
  // if(rm)
  //  var defender;
  //  var rept := {};
  //  foreach serial in rm
  //      foreach chr in EnumerateOnlineCharacters()
  //          if(chr.serial == serial)
  //              defender := chr;
  //              break;
  //          endif
  //      endforeach
  //      if(!defender)
  //          defender := SystemFindObjectBySerial(serial, SYSFIND_SEARCH_OFFLINE_MOBILES);
  //      endif
  //      rept.append(defender);
  //      defender := 0;
  //  endforeach
  //  // SendReportGump(who, rept);
  //  EraseObjProperty(who, "LoginNotify");
  //  EraseObjProperty(who, "ReportMenu");
  // endif
  // var lr := GetObjProperty(who, "LoginReport");
  // if(lr)
  //  var reportdata := {};
  //  var jerk;
  //  foreach serial in lr
  //      jerk := SystemFindObjectBySerial(serial, SYSFIND_SEARCH_OFFLINE_MOBILES);
  //      if(jerk)
  //          reportdata.append(jerk);
  //      endif
  //  endforeach
  //  EraseObjProperty(who, "LoginReport");
  // endif
  var nkarma := CStr( GetObjProperty( who, "ModKarma" ) );
  var nfame := CStr( GetObjProperty( who, "ModFame" ) );
  if ( nfame )
    var ofame := GetObjProperty( who, "Fame" );
    SendGainMessage( who, "Fame", CInt( nfame ) );
    SetObjProperty( who, "Fame", CInt( ofame ) + CInt( nfame ) );
    EraseObjProperty( who, "ModFame" );
    var karma := CInt( GetObjProperty( who, "Karma" ) );
    var fame := CInt( GetObjProperty( who, "Fame" ) );
    SetNotoTitle( who, karma, fame );
  endif
  if ( nkarma )
    var okarma := GetObjProperty( who, "Karma" );
    SendGainMessage( who, "Karma", CInt( nkarma ) );
    SetObjProperty( who, "Karma", CInt( okarma ) + CInt( nkarma ) );
    EraseObjProperty( who, "ModKarma" );
    var karma := CInt( GetObjProperty( who, "Karma" ) );
    var fame := CInt( GetObjProperty( who, "Fame" ) );
    SetNotoTitle( who, karma, fame );
  endif
  var whopack := who.backpack;
  if ( !GetObjProperty( whopack, "Owner" ) )
    SetObjProperty( whopack, "Owner", who.serial );
  endif
  SetObjProperty( who, "LastLog", ReadGameClock() );
  if ( GetObjProperty( who, "poly" ) )
    Detach();
    sleep( 15 );
    who.graphic := who.objtype;
    who.color := who.truecolor;
    EraseObjProperty( who, "poly" );
  endif
  var mailkeeper := GetObjProperty( who, "mailkeeper" );
  if ( !mailkeeper )
    start_script( ":gmtools:mailkeeper", who );
    mailkeeper := 1;
    SetObjProperty( who, "mailkeeper", 1 );
  endif
  if ( mailkeeper >= 60 )
    mailkeeper := 1;
    SetObjProperty( who, "mailkeeper", mailkeeper );
    Detach();
    start_script( ":gmtools:mailkeeper", who );
  else
    mailkeeper := mailkeeper + 1;
    SetObjProperty( who, "mailkeeper", mailkeeper );
  endif
  foreach thing in ListEquippedItems( who )
    if ( Cint( GetObjProperty( thing, "#equipped" ) ) != who.serial )
      ApplyEquipmentMods( who, thing );
    endif
  endforeach
  var time := FormatTime( GetTimeStruct( GetTime() ),
                          "<HH>:<MM>:<SS> on <DAY>-<MON>-<YY>" );
  SendSySMessage( who, "You have logged on at " + time + " local server time.",
                  color := 88 );

  var acct := who.acct;
  acct.SetProp( "lastlogon", ReadGameClock() );
  staffnotify( who );

  // Seasons addon
  sleepms( 3000 );
  var gseason := GetGlobalProperty( "gseason" );
  case ( gseason )
    "SEASON_DESOLATION":
      SetSeasonForPlayer( who, SEASON_DESOLATION );
    "SEASON_WINTER":
      SetSeasonForPlayer( who, SEASON_WINTER );
    "SEASON_FALL":
      SetSeasonForPlayer( who, SEASON_FALL );
    "SEASON_SUMMER":
      SetSeasonForPlayer( who, SEASON_SUMMER );
    "SEASON_SPRING":
      SetSeasonForPlayer( who, SEASON_SPRING );
  endcase

  // Record the gameclock time player logs in.
  SetObjProperty( who, "logontime", ReadGameClock() );
  SetObjProperty( who, "Real_Life_login_Time", time );

endprogram

function TrackIP( who )
  var acct := who.acct;
  var ipstring := acct.getprop( "LastIP" );
  if ( !ipstring )
    ipstring := {};
  endif
  var holder := {};
  var amt := len( ipstring );
  foreach thing in ipstring
    if ( ( thing[1] != who.ip ) && ( amt < 20 ) )
      holder.append( thing );
    else
      amt := amt - 1;
    endif
  endforeach
  ipstring := holder;
  var newarray := {};
  newarray.append( who.ip );
  newarray.append( who.name );
  ipstring.append( newarray );
  acct.setprop( "LastIP", ipstring );
  acct.setprop( "LastLogin", ReadGameClock() );
endfunction

function staffnotify( who )
  var pid := GetGlobalProperty( "#stafflist" );
  if ( !pid )
    syslog( "Stafflist not initialized!" );
    return;
  endif
  var process := getprocess( pid );
  if ( !process )
    syslog( "Can't find process for stafflist, pid=" + pid );
    return;
  endif
  var k := struct;
  if ( who.cmdlevel < 2 )
    k.+player := who;
    k.+type := EVID_PLAYER_LOGIN;
    process.sendevent( k );
  else
    k.+player := who;
    k.+type := EVID_STAFF_LOGIN;
    process.sendevent( k );
  endif
endfunction

// const LONG_COUNT_DECAY_TIME := 144000; //40 hours
// const SHORT_COUNT_DECAY_TIME := 28800; //8 hours

// var layout := {
// "page 0",
// "nodispose",
// "noclose",
// "gumppic 0 0 206",
// "gumppic 43 0 201",
// "gumppic 460 0 207",
// "gumppic 0 43 202",
// "gumppic 43 43 200",
// "gumppic 170 43 200",
// "gumppic 295 43 200",
// "gumppic 335 43 200",
// "gumppic 43 170 200",
// "gumppic 170 170 200",
// "gumppic 295 170 200",
// "gumppic 335 170 200",
// "gumppic 43 220 200",
// "gumppic 170 220 200",
// "gumppic 295 220 200",
// "gumppic 335 220 200",
// "gumppic 460 43 203",
// "gumppic 0 340 204",
// "gumppic 43 340 233",
// "gumppic 460 340 205",
// "button 380 345 249 248 1 0 99",
// "text 50 20 40 0",
// "text 50 50 40 1",
// "text 50 70 40 2"
// };

// var data := {
// "Now is the time for retribution!",
// "Check zero or more players to report for your murder",
// "and press OKAY."
// };

// function SendReportGump(who, reportables)
//  FillInArrays(reportables);
//  var ret := SendDialogGump(who,layout,data);
//  if(!ret)
//      var reportdata := {};
//      foreach reportable in(reportables)
//          reportdata.append(reportable.serial);
//      endforeach
//      SetObjProperty(who, "LoginReport", reportdata);
//      return;
//  endif
//  foreach id in (ret.keys)
//      if(id >= 10)
//          id := id-9;
//          var mob := reportables[id];
//          if(!(mob in EnumerateOnlineCharacters()))
//              SetObjProperty(mob, "LoginNotify", who.serial);
//          else
//              AdjustNoto(mob, who);
//          endif
//          AdjustMurderCounts(mob);
//      endif
//  endforeach
//  foreach reportable in(who.reportables)
//      who.removeReportable(reportable.serial, reportable.gameclock);
//  endforeach
// endfunction

// function FillInArrays(reportables)
//  var prev_y := 80;
//  var prev_x := 40;
//  var buttonret := 10;
//  layout.append("page 1");
//  foreach reportable in reportables
//      if(!reportable.cmdlevel)
//          if(buttonret==21)
//              prev_x := 300;
//              prev_y := 80;
//          endif
//          layout.append("checkbox " + CStr(prev_x) + " " + CStr(prev_y+20) + " 210 211 0 " + buttonret);
//          data.append(reportable.name);
//          layout.append("text " + CStr(prev_x+20) + " " + CStr(prev_y+20) + " 40 " + CStr(len(data)-1));
//          prev_y := prev_y+20;
//          buttonret := buttonret+1;
//      endif
//  endforeach
// endfunction

// function AdjustMurderCounts(killer)
//  var onlinetime := GetObjProperty(killer,"onlinetimer");
//  var longcount := GetObjProperty(killer,"longmurders");
//  if(!longcount)
//      longcount := 0;
//  endif
//  longcount := longcount + 1;
//  if(longcount > 4)
//      killer.setMurderer(1);
//      SendSysMessage(killer,"You are now known as a murderer!");
//  endif
//  var shortcount := GetObjProperty(killer, "shortmurders");
//  if(!shortcount)
//      shortcount := 0;
//  endif
//  shortcount := shortcount + 1;
//  SetObjProperty(killer, "longmurders", longcount);
//  SetObjProperty(killer, "shortmurders", shortcount);
//  SetObjProperty(killer, "decaylongcountat", onlinetime + LONG_COUNT_DECAY_TIME);
//  SetObjProperty(killer, "decayshortcountat", onlinetime + SHORT_COUNT_DECAY_TIME);
// endfunction

function RestoreMods( who )
  foreach thing in ListEquippedItems( who )
    if ( GetObjProperty( thing, "Pid" ) )
      var holder := {};
      var gain := GetObjProperty( thing, "gain" );
      if ( !gain )
        gain := 5;
      endif
      var type := GetObjProperty( thing, "type" );
      var tpe;
      case ( type )
        "strength":
          tpe := "str";
        "invisibility":
          tpe := "inv";
        "sight":
          tpe := "vis";
        "protection":
          tpe := "pro";
        "reflect":
          tpe := "ref";
        "bless":
          tpe := "bls";
      endcase
      holder.append( thing.serial );
      holder.append( tpe );
      holder.append( gain );
      SetObjProperty( thing, "equipped", who.serial );
      var parms := { who, thing };
      start_script( ":combat:chargeUpkeep", parms );
      print( "upkeep started" );
    endif
  endforeach
endfunction

///////////////////
//  Records the player's last 10 logins and their associated IP addresses - from WoD
///////////////////

function RecordPlayerLogin( character )
  var logon_record := GetAccountProperty( character.acctname, "logon_record" );
  if ( !logon_record )
    logon_record := dictionary;
  endif

  // only record the last 10
  var logon_keys := logon_record.keys();
  if ( logon_keys.size() )
    if ( logon_keys.size() > 10 )
      logon_record.erase( logon_keys[1] );
    endif
  endif

  var newlogon := {};
  newlogon[1] := Systime_GetReadableTimeString();
  newlogon[2] := character.ip;
  newlogon[3] := character.name;

  logon_record.insert( ReadGameClock(), newlogon );
  SetAccountProperty( character.acctname, "logon_record", logon_record );
endfunction